"mode debug" 
// This string tells the interpreter to show debug information with output
// The idea of using a string to inform the runtime is taken from JavaScript's "use strict" literal

a:int = 5
pi:double = 3.1416
pi_i:int = pi 
// Will automatically cast to integer

// running "./uc debug_mode.go" will give following debug info

// DEBUG MODE ENABLED
// NUMBER ADDED | K => 5 | 5
// TYPE_TOKEN: 75
// Setting type of a to 75
// NUMBER ADDED | Z => 3.141600
// TYPE_TOKEN: 90
// Setting type of pi to 90
// TYPE_TOKEN: 75
// Setting type of pi_i to 75



// Then UCML Runtime will dump the AST generated by the given code:-
//           binop L
//             binop L
//               = a
//                 number 5
//               = pi
//                 number 3.142
//             = pi_i
//               ref pi



// Then UCML Runtime will start evaluating the code
// Return type of a is K
// Evaluating integer: 5.00
// Expression Evaluated to 5.00
// casted to 5
// Setting a to 5
// Return type of pi is Z
// Evaluating double: 3.14
// Expression Evaluated to 3.14
// default type 3.14
// Setting pi to 3
// Return type of pi_i is Z
// Expression Evaluated to 3.14
// casted to 3
// Setting pi_i to 3



// At last, UCML Runtime will dump the Symbol Table Data
// Symbol 'a' : K is 5
// Symbol 'pi' : Z is 3.14
// Symbol 'pi_i' : K is 3